// ===================================================================
// debugStep2.js - Simulador de datos para Step 2 (WOGest)
// Archivo para pruebas locales - No usar en producci√≥n
// ===================================================================

/**
 * Funci√≥n para cargar datos simulados en el Step 2 y mostrar la UI
 * Permite probar el flujo visual completo sin necesidad de backend
 * Modo de uso: 
 * 1. Activar debug: window.DEBUG_MODE_STEP2 = true;
 * 2. Llamar a la funci√≥n: cargarDatosDebugStep2();
 */
function cargarDatosDebugStep2() {
  // Solo ejecutar si estamos en modo debug
  if (!window.DEBUG_MODE_STEP2) {
    console.warn("‚ùå Modo debug para Step 2 no activado. Para activar: window.DEBUG_MODE_STEP2 = true;");
    return;
  }

  console.log("üîç Modo debug Step 2 activado - Cargando datos simulados...");
  
  try {
    // Verificar que el estado global existe
    if (!window.appStateStep2) {
      console.error("‚ùå Error: window.appStateStep2 no est√° definido");
      alert("Error: No se puede acceder al estado de Step 2. ¬øEst√°s en la p√°gina correcta?");
      return;
    }
    
    // Crear respuesta simulada similar a la que enviar√≠a Python
    const respuestaSimulada = {
      success: true,
      message: "Procesamiento exitoso (SIMULADO)",
      detalle: generarDatosPrueba(100),  // Generar 100 registros de prueba
      timestamp: new Date().toISOString()
    };
    
    console.log("üìä Datos simulados generados:", respuestaSimulada);
    
    // Asignar al estado global
    window.appStateStep2.validationResult = respuestaSimulada;
    window.appStateStep2.yaMostroResultados = false; // Reset para permitir mostrar resultados
    
    // Ocultar errores y advertencias que pudieran estar visibles
    if (typeof ocultarErrorStep2 === "function") {
      ocultarErrorStep2();
    }
    
    // Definir funciones auxiliares para debug si no existen
    if (typeof actualizarEstadisticasLaterales !== "function") {
      window.actualizarEstadisticasLaterales = function(datos) {
        console.log("üìä Mock: actualizarEstadisticasLaterales", datos ? `(${datos.length} registros)` : "");
        return true;
      };
    }
    
    if (typeof conectarFiltrosStep2 !== "function") {
      window.conectarFiltrosStep2 = function() {
        console.log("üîç Mock: conectarFiltrosStep2 - Simulando conexi√≥n de filtros");
        return true;
      };
    }

    // Mostrar resultados llamando a la funci√≥n principal
    if (typeof mostrarResultadosStep2 === "function") {
      console.log("üé¨ Mostrando UI con datos simulados...");
      mostrarResultadosStep2(respuestaSimulada);
      
      // Mostrar bot√≥n siguiente
      if (typeof mostrarBotonSiguiente === "function") {
        mostrarBotonSiguiente();
      } else {
        console.warn("‚ö†Ô∏è Funci√≥n mostrarBotonSiguiente no disponible");
        const btnSiguiente = document.getElementById('btn-siguiente');
        if (btnSiguiente) {
          btnSiguiente.style.display = 'flex';
        }
      }
      
      console.log("‚úÖ Simulaci√≥n completada exitosamente");
    } else {
      console.error("‚ùå Error: Funci√≥n mostrarResultadosStep2 no encontrada");
      alert("Error: No se puede mostrar los resultados. ¬øEst√°s en la p√°gina correcta?");
    }
  } catch (error) {
    console.error("‚ùå Error al cargar datos simulados:", error);
    alert("Error al cargar datos simulados: " + error.message);
  }
}

/**
 * Genera datos de prueba aleatorios pero realistas para WOQ
 * @param {number} cantidad - Cantidad de registros a generar
 * @returns {Array} - Array con los registros generados
 */
function generarDatosPrueba(cantidad = 50) {
  const datos = [];
  const tiposWO = ["MNTO", "INST", "SERV", "REVI"];
  const estados = ["SI", "NO"];
  const dealerIds = [61, 72, 83, 94, 105];
  const dc = ["PE151", "PE245", "PE920", "PE500", "PE600"];
  
  // Nombres ficticios para generar datos m√°s realistas
  const nombres = [
    "JUAN P√âREZ L√ìPEZ", "MAR√çA GARC√çA RODR√çGUEZ", "CARLOS MART√çNEZ S√ÅNCHEZ", 
    "ANA L√ìPEZ GONZ√ÅLEZ", "LUIS RODR√çGUEZ FERN√ÅNDEZ", "LAURA GONZ√ÅLEZ D√çAZ",
    "JOS√â S√ÅNCHEZ MART√çN", "CARMEN D√çAZ P√âREZ", "MANUEL MART√çN GARC√çA",
    "ISABEL P√âREZ L√ìPEZ", "JAVIER GARC√çA RODR√çGUEZ", "PATRICIA MART√çNEZ S√ÅNCHEZ",
    "FRANCISCO L√ìPEZ GONZ√ÅLEZ", "ELENA RODR√çGUEZ FERN√ÅNDEZ", "MIGUEL GONZ√ÅLEZ D√çAZ"
  ];
  
  // Status ficticios
  const status1 = ["OP", "CL", "PG", "PE", "CA"];
  const status2 = ["CUOP", "COPE", "ATCL", "SUPE", "CUCE"];
  
  for (let i = 0; i < cantidad; i++) {
    // Determinar si est√° cerrado
    const cerradoFlag = Math.random() > 0.4;  // 60% cerrados, 40% pendientes
    
    datos.push({
      DC: dc[Math.floor(Math.random() * dc.length)],
      n_wo: 5000000 + Math.floor(Math.random() * 1000000),
      n_wo_alt: `WO${5000000 + Math.floor(Math.random() * 1000000)}`,
      TIPO: tiposWO[Math.floor(Math.random() * tiposWO.length)],
      contrato: 1500000 + Math.floor(Math.random() * 100000),
      DEALER: dealerIds[Math.floor(Math.random() * dealerIds.length)],
      STATUS1: status1[Math.floor(Math.random() * status1.length)],
      STATUS2: status2[Math.floor(Math.random() * status2.length)],
      cerrado: cerradoFlag ? "X" : "",
      cliente: nombres[Math.floor(Math.random() * nombres.length)],
      es_cerrado: cerradoFlag ? "SI" : "NO",
      orden: i + 1,
      estado: cerradoFlag ? "CERRADO" : "PENDIENTE",
      fecha_creacion: generarFechaAleatoria(),
      fecha_cierre: cerradoFlag ? generarFechaAleatoria() : "",
      timestamp: new Date().toISOString()
    });
  }
  
  return datos;
}

/**
 * Genera una fecha aleatoria de los √∫ltimos 60 d√≠as
 * @returns {string} - Fecha en formato DD/MM/YYYY
 */
function generarFechaAleatoria() {
  const hoy = new Date();
  const diasAtras = Math.floor(Math.random() * 60); // Hasta 60 d√≠as atr√°s
  
  const fecha = new Date(hoy);
  fecha.setDate(hoy.getDate() - diasAtras);
  
  return `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear()}`;
}

/**
 * Funciones de soporte para debugging adicionales
 */
function configurarFuncionesDebugStep2() {
  // Estas funciones solo se definen si no existen ya
  const funcionesAuxiliares = {
    // Funciones para estad√≠sticas
    cargarDatosDebugStep2,
    actualizarEstadisticasLaterales: (datos) => {
      console.log("üìä Mock: actualizarEstadisticasLaterales", datos ? `(${datos.length} registros)` : "");
      return true;
    },
    
    // Funciones para filtros
    conectarFiltrosStep2: () => {
      console.log("üîç Mock: conectarFiltrosStep2 - Simulando conexi√≥n de filtros");
      return true;
    },
    
    // Funciones para UI y navegaci√≥n
    ocultarErrorStep2: () => {
      console.log("üõ†Ô∏è Mock: ocultarErrorStep2");
      const elementosError = document.querySelectorAll('.alert-danger, .error-message');
      elementosError.forEach(el => el.style.display = 'none');
    },
    mostrarBotonSiguiente: () => {
      console.log("‚ñ∂Ô∏è Mock: mostrarBotonSiguiente");
      const btnSiguiente = document.getElementById('btn-siguiente');
      if (btnSiguiente) btnSiguiente.style.display = 'flex';
    },
    
    // Solo para log en consola
    logDebugStep2: (mensaje) => {
      console.log(`üêõ Debug Step2: ${mensaje}`);
    }
  };
  
  // Registrar todas las funciones auxiliares en window
  Object.entries(funcionesAuxiliares).forEach(([nombre, funcion]) => {
    if (typeof window[nombre] !== "function") {
      window[nombre] = funcion;
      console.log(`‚úÖ Registrada funci√≥n auxiliar debug: ${nombre}`);
    }
  });
}

// Configurar funciones auxiliares y exponer la funci√≥n principal para uso global
configurarFuncionesDebugStep2();
window.cargarDatosDebugStep2 = cargarDatosDebugStep2;

// Mensaje informativo en consola
console.log(
  "%cüîß Debug Step 2 disponible: " + 
  "%cPara activar, ejecuta en consola:" +
  "%c\n\nwindow.DEBUG_MODE_STEP2 = true;\ncargarDatosDebugStep2();", 
  "color: #0066ff; font-weight: bold;", 
  "color: #444;",
  "color: #008800; font-weight: bold;"
);
